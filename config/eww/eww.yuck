(include "variables.yuck")

(defwidget tray []
  (box
    :class "tray"
    :halign "end"
    :space-evenly false
    (box
      :class "tray-item wifi"
      :spacing 0
      :space-evenly false
      (image :class "icon wifi-icon" :path wifi-icon :image-height "20")
      (label :class "text wifi-text" :text wifi-strength))
    (box
      :class "tray-item vol"
      :spacing 0
      :space-evenly false
      (image :class "icon vol-icon" :path vol-icon :image-height "20")
      (label :class "text vol-text" :text "${vol-num}%"))
    (box
      :class "tray-item bat"
      :spacing 0
      :space-evenly false
      (image :class "icon bat-icon" :path bat-icon :image-height "26")
      (label :class "text bat-text" :text "${bat-num}%"))
    (box
      :class "tray-item br"
      :spacing 0
      :space-evenly false
      (image :class "icon br-icon" :path "images/brightness.svg" :image-height "20")
      (label :class "text vol-text" :text "${br}%"))
    ))

(defwidget workspaces []
  (box
    :class "workspaces"
    :halign "start"
    :hexpand false
    :visible {center-option == "workspaces" ? true : false}
    (literal :content numworkspaces)))

(defwidget time []
  (box
    :class "time"
    :visible {uk}
    :space-evenly false
    :spacing 0
    (label :class "text" :text "")
    (image :class "icon clock-icon" :path "images/clock.svg" :image-width "20" :image-height "20")
    (label :class "text" :text "${hours}󰇙${mins}")))

(defwidget time-pak []
  (box
    :class "time-pak"
    :visible {!uk}
    :spacing 0
    :space-evenly false
    (label :class "text" :text "")
    (image :class "icon clock-icon" :path "images/clock.svg" :image-width "20" :image-height "20")
    (label :class "text" :text "${(hours+5)}󰇙${mins}")))

(defwidget date []
  (box
    :class "date"
    :halign "start" 
    :spacing 0
    :space-evenly false
    (image :class "icon date-icon" :path "images/calendar.svg" :image-width "20" :image-height "20")
    (label :class "text" :text "${day} ${day-num} ${month}, ${year}")))

(defwidget left []
  (box
    :class "left"
    :halign "start"
    :space-evenly false
    :spacing 0
    (eventbox
      :halign "center"
      :valign "center"
      :onclick {uk ? "eww update uk=false" : "eww update uk=true"}
      (box
        (time)
        (time-pak)))
    (date)))

(defwidget lock []
  (box
    :class {power-option == 1 ? "pwr-active pwr-widget" : "pwr-inactive pwr-widget"}
    :orientation "h"
    :spacing 10
    :space-evenly false
    (image :path {power-option == 1 ? "images/lock-selected.svg" : "images/lock.svg"} :image-width 20 :image-height 20)
    (label :visible {power-option == 1 ? true : false} :text "Lock")))

(defwidget logout []
  (box
    :class {power-option == 2 ? "pwr-active pwr-widget" : "pwr-inactive widget"}
    :orientation "h"
    :spacing 10
    :space-evenly false
    (image :path {power-option == 2 ? "images/logout-selected.svg" : "images/logout.svg"} :image-width 20 :image-height 20)
    (label :visible {power-option == 2 ? true : false} :text "Logout")))

(defwidget reboot []
  (box
    :class {power-option == 3 ? "pwr-active pwr-widget" : "pwr-inactive widget"}
    :orientation "h"
    :spacing 10
    :space-evenly false
    (image :path {power-option == 3 ? "images/reboot-selected.svg" : "images/reboot.svg"} :image-width 20 :image-height 20)
    (label :visible {power-option == 3 ? true : false} :text "Reboot")))

(defwidget shutdown []
  (box
    :class {power-option == 4 ? "pwr-active pwr-widget" : "pwr-inactive pwr-widget"}
    :orientation "h"
    :spacing 10
    :space-evenly false
    (image :path {power-option == 4 ? "images/shutdown-selected.svg" : "images/shutdown.svg"} :image-width 20 :image-height 20)
    (label :visible {power-option == 4 ? true : false} :text "Shutdown")))

(defwidget powermenu []
  (box
    :class "powermenu"
    :spacing 25
    :space-evenly false
    :orientation "h"
    :visible {center-option == "powermenu" ? true : false}
    (lock)
    (logout)
    (reboot)
    (shutdown)))

(defwidget fullscreen []
  (box
    :class {screenshot-option == 1 ? "ss-active ss-widget" : "ss-inactive ss-widget"}
    :spacing 10
    :space-evenly false
    :orientation "h"
    (image :path {screenshot-option == 1 ? "images/screenshot-selected.svg" : "images/screenshot.svg"} :image-width 20 :image-height 20)
    (label :visible {screenshot-option == 1 ? true : false} :text "Fullscreen")))

(defwidget delay []
  (box
    :class {screenshot-option == 2 ? "ss-active ss-widget" : "ss-inactive ss-widget"}
    :spacing 10
    :space-evenly false
    :orientation "h"
    (image :path {screenshot-option == 2 ? "images/alarm-selected.svg" : "images/alarm.svg"} :image-width 20 :image-height 20)
    (label :visible {screenshot-option == 2 ? true : false} :text "3s")))

(defwidget region []
  (box
    :class {screenshot-option == 3 ? "ss-active ss-widget" : "ss-inactive ss-widget"}
    :spacing 10
    :space-evenly false
    :orientation "h"
    (image :path {screenshot-option == 3 ? "images/crop-selected.svg" : "images/crop.svg"} :image-width 20 :image-height 20)
    (label :visible {screenshot-option == 3 ? true : false} :text "Region")))

(defwidget screenshooter []
  (box
    :class "screenshooter"
    :spacing 25
    :space-evenly false
    :orientation "h"
    :visible {center-option == "screenshooter" ? true : false}
    (fullscreen)
    (delay)
    (region)))

(defwidget center []
  (box
    :spacing 25
    :space-evenly false
    (workspaces)
    (screenshooter)
    (powermenu)))

(defwidget bar []
  (centerbox
    :orientation "h"
    :class "bar"
    (left)
    (center)
    (tray)))

(defwindow bar
  :stacking "fg"
  :monitor "0"
  :exclusive true
  :namespace "bar"
  :geometry (geometry
              :x "0px"
              :y "0%"
              :width "100%"
              :height "0%"
              :anchor "top center")
  (bar))

(defwidget corners []
  (box
    :class "corners-box"
    (box
      :class "corners-left"
      :hexpand false
      :halign "start")
    (box
      :class "corners-right"
      :hexpand false
      :halign "end")))

(defwindow corners
  :stacking "fg"
  :monitor "0"
  :exclusive false
  :namespace "corners"
  :geometry (geometry
              :x "0px"
              :y "0px"
              :width "100%"
              :height "0%"
              :anchor "top center")
  (corners))
